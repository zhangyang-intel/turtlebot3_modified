From c01703fc716375b51d5abf376f557b838bd2228d Mon Sep 17 00:00:00 2001
From: zy <zy@yangzh13-desk.lan>
Date: Sat, 29 Oct 2022 13:29:21 +0800
Subject: [PATCH] fix the problem that the odometry may publish an outlier

and modify the description according to the transformation between the Realsense and turtlebot baselink
---
 .../urdf/turtlebot3_waffle_pi.urdf            | 16 +-----
 .../turtlebot3_node/sensors/joint_state.hpp   |  1 +
 turtlebot3_node/src/odometry.cpp              | 13 ++++-
 turtlebot3_node/src/sensors/joint_state.cpp   | 57 +++++++++++++++++--
 4 files changed, 66 insertions(+), 21 deletions(-)

diff --git a/turtlebot3_description/urdf/turtlebot3_waffle_pi.urdf b/turtlebot3_description/urdf/turtlebot3_waffle_pi.urdf
index 03ff47f..c05c760 100644
--- a/turtlebot3_description/urdf/turtlebot3_waffle_pi.urdf
+++ b/turtlebot3_description/urdf/turtlebot3_waffle_pi.urdf
@@ -226,32 +226,20 @@
   </link>
 
   <joint name="camera_joint" type="fixed">
-    <origin xyz="0.073 -0.011 0.084" rpy="0 0 0"/>
+    <origin xyz="0.064 0.045 0.11" rpy="0 0 0"/>
     <parent link="base_link"/>
     <child link="camera_link"/>
   </joint>
 
   <link name="camera_link">
     <collision>
-      <origin xyz="0.005 0.011 0.013" rpy="0 0 0"/>
+      <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
       <geometry>
         <box size="0.015 0.030 0.027"/>
       </geometry>
     </collision>
   </link>
 
-  <joint name="camera_rgb_joint" type="fixed">
-    <origin xyz="0.003 0.011 0.009" rpy="0 0 0"/>
-    <parent link="camera_link"/>
-    <child link="camera_rgb_frame"/>
-  </joint>
-  <link name="camera_rgb_frame"/>
 
-  <joint name="camera_rgb_optical_joint" type="fixed">
-    <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
-    <parent link="camera_rgb_frame"/>
-    <child link="camera_rgb_optical_frame"/>
-  </joint>
-  <link name="camera_rgb_optical_frame"/>
 
 </robot>
diff --git a/turtlebot3_node/include/turtlebot3_node/sensors/joint_state.hpp b/turtlebot3_node/include/turtlebot3_node/sensors/joint_state.hpp
index a465d67..b078334 100644
--- a/turtlebot3_node/include/turtlebot3_node/sensors/joint_state.hpp
+++ b/turtlebot3_node/include/turtlebot3_node/sensors/joint_state.hpp
@@ -52,6 +52,7 @@ public:
 
 private:
   rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr pub_;
+  bool first_flag;
 };
 }  // namespace sensors
 }  // namespace turtlebot3
diff --git a/turtlebot3_node/src/odometry.cpp b/turtlebot3_node/src/odometry.cpp
index 378e854..9c2bd46 100644
--- a/turtlebot3_node/src/odometry.cpp
+++ b/turtlebot3_node/src/odometry.cpp
@@ -146,7 +146,7 @@ void Odometry::publish(const rclcpp::Time & now)
   odom_msg->header.frame_id = frame_id_of_odometry_;
   odom_msg->child_frame_id = child_frame_id_of_odometry_;
   odom_msg->header.stamp = now;
-
+//RCLCPP_INFO(nh_->get_logger(),"robot_pose_[0]: %f,  robot_pose_[1]: %f",robot_pose_[0],robot_pose_[1]);
   odom_msg->pose.pose.position.x = robot_pose_[0];
   odom_msg->pose.pose.position.y = robot_pose_[1];
   odom_msg->pose.pose.position.z = 0;
@@ -187,8 +187,9 @@ void Odometry::publish(const rclcpp::Time & now)
   odom_tf.header.frame_id = frame_id_of_odometry_;
   odom_tf.child_frame_id = child_frame_id_of_odometry_;
   odom_tf.header.stamp = now;
-
+//RCLCPP_INFO(nh_->get_logger(),"odom_msg:  positionx: %f,  positiony: %f",odom_msg->pose.pose.position.x,odom_msg->pose.pose.position.y);
   odom_pub_->publish(std::move(odom_msg));
+  //RCLCPP_INFO(nh_->get_logger(),"odom_msg:  positionx: %d,  positiony: %d",odom_msg->pose.pose.position.x,odom_msg->pose.pose.position.y);
 
   if (publish_tf_) {
     tf_broadcaster_->sendTransform(odom_tf);
@@ -199,10 +200,14 @@ void Odometry::update_joint_state(
   const std::shared_ptr<sensor_msgs::msg::JointState const> & joint_state)
 {
   static std::array<double, 2> last_joint_positions = {0.0f, 0.0f};
+  //RCLCPP_INFO(nh_->get_logger(), "joint_state->position[0] : %f,  joint_state->position[1] : %f", joint_state->position[0],joint_state->position[1]);
 
   diff_joint_positions_[0] = joint_state->position[0] - last_joint_positions[0];
   diff_joint_positions_[1] = joint_state->position[1] - last_joint_positions[1];
 
+  //if(diff_joint_positions_[0]>100)  diff_joint_positions_[0] = 0;
+  //if(diff_joint_positions_[1]>100)  diff_joint_positions_[1] = 0;
+
   last_joint_positions[0] = joint_state->position[0];
   last_joint_positions[1] = joint_state->position[1];
 }
@@ -219,6 +224,8 @@ bool Odometry::calculate_odometry(const rclcpp::Duration & duration)
   // rotation value of wheel [rad]
   double wheel_l = diff_joint_positions_[0];
   double wheel_r = diff_joint_positions_[1];
+  //RCLCPP_INFO(nh_->get_logger(), "wheel_l : %f   ,wheel_r : %f", wheel_l,wheel_r);
+
 
   double delta_s = 0.0;
   double delta_theta = 0.0;
@@ -246,7 +253,7 @@ bool Odometry::calculate_odometry(const rclcpp::Duration & duration)
   }
 
   delta_s = wheels_radius_ * (wheel_r + wheel_l) / 2.0;
-
+//RCLCPP_INFO(nh_->get_logger(), "delta_s : %f", delta_s);
   if (use_imu_) {
     theta = imu_angle_;
     delta_theta = theta - last_theta;
diff --git a/turtlebot3_node/src/sensors/joint_state.cpp b/turtlebot3_node/src/sensors/joint_state.cpp
index a73b7e1..ff6b23b 100644
--- a/turtlebot3_node/src/sensors/joint_state.cpp
+++ b/turtlebot3_node/src/sensors/joint_state.cpp
@@ -30,6 +30,7 @@ JointState::JointState(
   const std::string & frame_id)
 : Sensors(nh, frame_id)
 {
+  first_flag = true;
   pub_ = nh->create_publisher<sensor_msgs::msg::JointState>(topic_name, this->qos_);
 
   RCLCPP_INFO(nh_->get_logger(), "Succeeded to create joint state publisher");
@@ -73,6 +74,9 @@ void JointState::publish(
   msg->name.push_back("wheel_left_joint");
   msg->name.push_back("wheel_right_joint");
 
+  //RCLCPP_INFO(nh_->get_logger(), "position[0]:  %d,position[1]:  %d",position[0],position[1]);
+  //RCLCPP_INFO(nh_->get_logger(), "last_diff_position[0]:  %d,last_diff_position[1]:  %d",last_diff_position[0],last_diff_position[1]);
+
   msg->position.push_back(TICK_TO_RAD * last_diff_position[0]);
   msg->position.push_back(TICK_TO_RAD * last_diff_position[1]);
 
@@ -82,10 +86,55 @@ void JointState::publish(
   // msg->effort.push_back(current[0]);
   // msg->effort.push_back(current[1]);
 
-  last_diff_position[0] += (position[0] - last_position[0]);
-  last_diff_position[1] += (position[1] - last_position[1]);
-
-  last_position = position;
+  if(first_flag)
+  {
+
+    last_diff_position[0] += (position[0] - last_position[0]);
+    last_diff_position[1] += (position[1] - last_position[1]);
+    last_position = position;
+    RCLCPP_INFO(nh_->get_logger(), "This package will filter the outliers");
+    RCLCPP_INFO(nh_->get_logger(), "at the beginning:position[0]:  %d,position[1]:  %d",position[0],position[1]);
+    first_flag = false;
+
+  }
+  else{
+    //bool tmp_flag = false;
+      if(abs(position[0] - last_position[0])>1000)
+  {
+
+    RCLCPP_INFO(nh_->get_logger(), "position_0 outlier occurs, attention:!!!! position[0]:  %d,position[1]:  %d",position[0],position[1]);
+    //tmp_flag = true;
+  }
+
+  if(abs(position[0] - last_position[0])>1000 || abs(position[1] - last_position[1])>1000)
+  {
+
+    RCLCPP_INFO(nh_->get_logger(), "position_1 outlier occurs, attention:!!!! position[0]:  %d,position[1]:  %d",position[0],position[1]);
+    //tmp_flag = true;
+  }
+
+    if(abs(position[0] - last_position[0])<5000)
+    {
+      last_diff_position[0] += (position[0] - last_position[0]);
+      last_position[0] = position[0];
+    }
+    if(abs(position[1] - last_position[1])<5000)
+    {
+      last_diff_position[1] += (position[1] - last_position[1]);
+      last_position[1] = position[1];
+    }
+
+    // if(tmp_flag)
+    // {
+    //   RCLCPP_INFO(nh_->get_logger(), "after process:last_position[0]:  %d,last_position[1]:  %d",last_position[0],last_position[1]);
+    //   RCLCPP_INFO(nh_->get_logger(), "after process:position[0]:  %d,position[1]:  %d",position[0],position[1]);
+    // }
+
+  }
+
+  // last_diff_position[0] += (position[0] - last_position[0]);
+  // last_diff_position[1] += (position[1] - last_position[1]);
+  // last_position = position;
 
   pub_->publish(std::move(msg));
 }
-- 
2.25.1

